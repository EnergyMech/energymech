#
#   EnergyMech, IRC bot software
#   Copyright (c) 1997-2021 proton
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

INSTALLNAME =	energymech
INSTALLDIR =	..
INSTALLMODE =	0700

LDSCRIPT =	@ldscript@
CPROF =		@cprof@
LPROF =		@lprof@
LIBS =		@libflags@
PIPEFLAG =	@pipeflag@
GDBFLAG =	@gdbflag@
WARNFLAG =	@W_FLAGS@
OPTIMIZE =	@O_FLAGS@
PYINCLUDE =	@PYINCLUDE@
TCLINCLUDE =	@TCLINCLUDE@
I_PERL =	@I_PERL@
L_PERL =	@L_PERL@

CFLAGS =	@CFLAGS@
LFLAGS =	$(PIPEFLAG) $(GDBFLAG)

CC =		@CC@
MV =		mv -f
RM =		rm -f
CHMOD =		chmod

BASEINCLUDES =	config.h defines.h structs.h global.h h.h
INCS =		$(BASEINCLUDES) mcmd.h text.h usercombo.h

TESTFILES =	aliastest calctest safepathtest

OFILES =	alias.o auth.o bounce.o calc.o channel.o core.o ctcp.o debug.o dns.o function.o greet.o \
		help.o hostinfo.o io.o irc.o main.o net.o note.o ons.o parse.o partyline.o \
		perl.o prot.o python.o reset.o seen.o shit.o spy.o tcl.o toybox.o \
		uptime.o user.o vars.o web.o lib/string.o @MD5_O@ @SHA_O@

SRCFILES =	alias.c auth.c bounce.c calc.c channel.c core.c ctcp.c debug.c dns.c function.c greet.c \
		help.c hostinfo.c io.c irc.c main.c net.c note.c ons.c parse.c partyline.c \
		perl.c prot.c python.c reset.c seen.c shit.c spy.c tcl.c toybox.c \
		uptime.c user.c vars.c web.c lib/string.c @MD5_C@ @SHA_C@

.PHONY:		all clean mega-install mega mega-static test commands

all:		$(INSTALLNAME)

#
#   mcmd.h is generated at compile time to wrap up all command attributes more efficiently,
#   instead of doing extra parsing and handling while the bot is running.
#

gencmd:		gencmd.c io.c config.h structs.h
		$(CC) $(LFLAGS) -o gencmd gencmd.c

mcmd.h:		gencmd
		./gencmd mcmd.h

usercombo.h:	gencmd
		./gencmd usercombo.h

githash.h:	gencmd
		./gencmd githash.h

global.h:	githash.h

install:	$(INSTALLNAME)
		$(CHMOD) $(INSTALLMODE) $(INSTALLNAME)
		$(MV) $(INSTALLNAME) $(INSTALLDIR)

clean:
		$(RM) $(INSTALLNAME) gencmd mcmd.h usercombo.h githash.h core $(TESTFILES) $(OFILES)

$(INSTALLNAME):	$(OFILES)
		$(CROSS_COMPILE)$(CC) $(LFLAGS) -o $(INSTALLNAME) $(OFILES) $(LPROF) $(LIBS) $(LDSCRIPT) $(L_PERL)
#@oc@		$(CROSS_COMPILE)objcopy -R .note -R .comment -R .got -R .got.plt $(INSTALLNAME)
@sz@		size $(INSTALLNAME)

$(INSTALLNAME)-static:	$(OFILES)
		$(CROSS_COMPILE)$(CC) $(LFLAGS) -o $(INSTALLNAME) $(OFILES) $(LPROF) $(LIBS) $(LDSCRIPT) $(L_PERL) -static
#@oc@		$(CROSS_COMPILE)objcopy -R .note -R .comment -R .got -R .got.plt $(INSTALLNAME)
@sz@		size $(INSTALLNAME)


#
#  'mega' versions
#  compiling the C files all at once (having all the code "visible" during the whole process) enables GCC to make more optimizations,
#  resulting in a smaller, more efficient, binary. this process uses lots more memory at compile time.
#

mega-install:	mega $(SRCFILES) $(INCS) usage.h
		$(CHMOD) $(INSTALLMODE) $(INSTALLNAME)
		$(MV) $(INSTALLNAME) $(INSTALLDIR)

mega:		$(SRCFILES) $(INCS) usage.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -o $(INSTALLNAME) main.c -DMEGA_C -DGENDATE="`./gencmd date`" -I. $(LPROF) $(LIBS) $(LDSCRIPT) $(PYINCLUDE) $(TCLINCLUDE) $(I_PERL) $(L_PERL)
#@oc@		$(CROSS_COMPILE)objcopy -R .note -R .comment $(INSTALLNAME)
@sz@		size $(INSTALLNAME)

mega-static:	$(SRCFILES) $(INCS) usage.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -o $(INSTALLNAME) main.c -DMEGA_C -DGENDATE="`./gencmd date`" -I. $(LPROF) $(LIBS) $(LDSCRIPT) $(PYINCLUDE) $(TCLINCLUDE) $(I_PERL) $(L_PERL) -static
#@oc@		$(CROSS_COMPILE)objcopy -R .note -R .comment $(INSTALLNAME)
@sz@		size $(INSTALLNAME)

#
#  testing stuff
#

test:		$(TESTFILES)
		./aliastest
		./calctest
		./safepathtest

aliastest:	alias.c githash.h lib/string.o
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -o aliastest $< lib/string.o $(LPROF) $(LIBS) -DTEST

calctest:	calc.c githash.h mcmd.h lib/string.o
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -o calctest $< lib/string.o $(LPROF) $(LIBS) -DTEST

safepathtest:	function.c githash.h lib/string.o
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -o safepathtest $< lib/string.o $(LPROF) $(LIBS) -DTEST

commands:
		grep -E '(void do_.*\(COMMAND_ARGS\)|/*---Help:)' *c

#
#
#

lib/md5.o:	lib/md5.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@ -Ilib $(CPROF)

lib/sha1.o:	lib/sha1.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@ -Ilib $(CPROF)

lib/string.o:	lib/string.c $(BASEINCLUDES)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@ -I. $(CPROF)

alias.o:	alias.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

auth.o:		auth.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

bounce.o:	bounce.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

calc.o:		calc.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

channel.o:	channel.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

core.o:		core.c $(INCS) settings.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

ctcp.o:		ctcp.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

debug.o:	debug.c $(INCS) settings.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF) $(PYINCLUDE)

dns.o:		dns.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

function.o:	function.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

greet.o:	greet.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

help.o:		help.c $(INCS) usage.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

hostinfo.o:	hostinfo.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

io.o:		io.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

irc.o:		irc.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

main.o:		main.c $(INCS) githash.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -DGENDATE="`./gencmd date`" $(CPROF) $(PYINCLUDE)

net.o:		net.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

note.o:		note.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

ons.o:		ons.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

parse.o:	parse.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

partyline.o:	partyline.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

perl.o:		perl.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF) $(I_PERL)

prot.o:		prot.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

python.o:	python.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF) $(PYINCLUDE)

reset.o:	reset.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

seen.o:		seen.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

shit.o:		shit.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

spy.o:		spy.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

tcl.o:		tcl.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF) $(TCLINCLUDE)

toybox.o:	toybox.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

uptime.o:	uptime.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

user.o:		user.c $(INCS) usercombo.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

vars.o:		vars.c $(INCS) settings.h
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

web.o:		web.c $(INCS)
		$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< $(CPROF)

